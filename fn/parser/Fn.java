/* Generated By:JavaCC: Do not edit this line. Fn.java */
package parser;

import parser.Fn;
import syntaxtree.*;
import java.util.Vector;


public class Fn implements FnConstants {

  static final public Prog Prog() throws ParseException {
   Expr n0;
   NodeToken n1;
   Token n2;
    n0 = Expr();
    n2 = jj_consume_token(0);
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new Prog(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Expr Expr() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   Abs n2;
   RApp n3;
   NodeSequence n4;
   Var n5;
   RApp n6;
   Int n7;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FN:
        n1 = new NodeSequence(2);
      n2 = Abs();
        n1.addNode(n2);
      n3 = RApp();
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case VAR:
        n4 = new NodeSequence(2);
      n5 = Var();
        n4.addNode(n5);
      n6 = RApp();
        n4.addNode(n6);
        n0 = new NodeChoice(n4, 1);
      break;
    case N:
      n7 = Int();
        n0 = new NodeChoice(n7, 2);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Expr(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Abs Abs() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   RType n4;
   NodeToken n5;
   Token n6;
   RParam n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Expr n12;
   NodeToken n13;
   Token n14;
    n1 = jj_consume_token(FN);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = RType();
    n6 = jj_consume_token(VAR);
              n5 = JTBToolkit.makeNodeToken(n6);
    n7 = RParam();
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(LCURLY);
             n10 = JTBToolkit.makeNodeToken(n11);
    n12 = Expr();
    n14 = jj_consume_token(RCURLY);
             n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new Abs(n0,n2,n4,n5,n7,n8,n10,n12,n13);}
    throw new Error("Missing return statement in function");
  }

  static final public RParam RParam() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   RType n4;
   NodeToken n5;
   Token n6;
   RParam n7;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(14);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = RType();
        n1.addNode(n4);
      n6 = jj_consume_token(VAR);
                 n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
      n7 = RParam();
        n1.addNode(n7);
        n0.addNode(n1);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
     {if (true) return new RParam(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public RApp RApp() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expr n4;
   RArg n5;
   NodeToken n6;
   Token n7;
   RApp n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
        n1 = new NodeSequence(5);
      n3 = jj_consume_token(LPAREN);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = Expr();
        n1.addNode(n4);
      n5 = RArg();
        n1.addNode(n5);
      n7 = jj_consume_token(RPAREN);
               n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
      n8 = RApp();
        n1.addNode(n8);
        n0.addNode(n1);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
     {if (true) return new RApp(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public RArg RArg() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expr n4;
   RArg n5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(14);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = Expr();
        n1.addNode(n4);
      n5 = RArg();
        n1.addNode(n5);
        n0.addNode(n1);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
     {if (true) return new RArg(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public RType RType() throws ParseException {
   TInt n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   RType n5;
    n0 = TInt();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARROW:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(ARROW);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = RType();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
     {if (true) return new RType(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public Var Var() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(VAR);
              n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Var(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Int Int() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(N);
            n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Int(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public TInt TInt() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(TINT);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new TInt(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FnTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2820,0x4000,0x40,0x4000,0x1000,};
   }

  /** Constructor with InputStream. */
  public Fn(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Fn(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FnTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Fn(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FnTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Fn(FnTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(FnTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[15];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
