#+HTML_HEAD: <link href="./assets/bootstrap.min.css" rel="stylesheet">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./assets/style.css" />
#+HTML_HEAD: <script src="./assets/jquery-1.7.1.js"></script>
#+HTML_HEAD: <script src="./assets/site.js"></script>
#+TITLE: MiniJava Type System
#+OPTIONS: toc:nil

* Type system
- Rules
- Questions
  - Goal
    - Why do the class names need to be distinct? 
      - Could we just use the last one?
      - Why would that be bad?
    - What might we ignore here to simplify our type checker a lot?

  - Main Class
    - (Piazza) What is bottom? How is it used in the rules?
      - In other words, what is the impact of checking the method body ~C = ⊥~?
        - rule 44 

  - Type Declarations
    - What is ~C~ in the rules? How is it used?

    - (Piazza) What should we do without forward declarations?

      #+begin_src java
      class B extends A {
        // ...
      }

      class A {
        // ...
      }
      #+end_src

      - Do we need to check that ~B~ "properly" extends ~A~ at this level?
      - What does it mean to "properly" extend ~A~?

    - What's the difference between rule 23 and 24?
      - Can you delay overload checking?
        - Why is that hard/different?

    - (Piazza) How does overload checking traverse the inheritance tree?
      - Rule 24

      #+begin_src java
      class A {
          public int[] m() {
            ...
          }
      }

      class B extends A {
        ...
      }

      class C extends B {
          public int m() {
            ...
          }
      }
      #+end_src

      - Intuitively why shouldn't this typecheck?
      - How does the type system exclude these class definitions?
        - Rules 20, 19, 16

  - Method Declarations
    - Why are the fields and method identifiers treated as lists/vectors and not
      sets in rule 25?
    - What does the ~distinct~ predicate prevent here?
    - What is the consequence of appending the parameters and locals to the
      *front* of ~fields(C)~?
      
  - Statements
    - What is the difference between a statement and expression?
      - Why do we do this at all?
      - How can you define a sequence of "statements" as an expression?

    - Rule 26 
      - What are the brackets here for? Where is the type error in the follow
        code?
        
        #+begin_src java
        class Foo {
            public static void main(String args[]){
                int x = 1;

                {
                    int y = 1;
                    System.out.println(x);
                    System.out.println(y);
                }

                System.out.println(x);
                System.out.println(y);
            }
        }
        #+end_src
        
      - Does this matter in minijava?
      - How would you support it?
        
        #+begin_src rule
        A,C |- si  i ∈ 1...q
        --------------------
        A,C |- { s1 ... sq }

        A ᐧ [id1 : t1, ..., idr : tr] ,C |- si  i ∈ 1...q
        --------------------------------------------------
        A,C |- { t1 id1; ... tr idr; s1 ... sq }
        #+end_src

    - Rule 29
      - How would this rule be different ~if e1 then e2 else e3~ were an
        expression?
      - What does this mean for expressions v statements?

  - Expressions
    - Rule 39 
      
  
  
